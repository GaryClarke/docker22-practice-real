add-composer
- Have app running
- Add composer config to php/Dockerfile
- Add composer.json
- Shell into container and show vendor missing
- Pin vendor and try again
- Explain considerations - plan to create docker-compose.dev.yaml

environment-variables
- composer install --ignore-platform-reqs
- show Dockerfile ignores dev dependencies
- composer dump-autoload
- show dev dependencies inside container
- add src files and explain branch
- Add env vars to docker compose and demo
- Add env vars to .env file and demo
- Explain how to use alternative --env-file like so: docker compose --env-file ./config/.env.dev config

add-redis
- add redis to docker compose
- spin up docker compose and check port
- add environment variables
- add source code
- test in browser

add-xdebug
- update Dockerfile (have commands ready)

# Useful PHP extension installer image, copy binary into your container
COPY --from=mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/

# Install php extensions
# exit on errors, exit on unset variables, print every command as it is executed
RUN set -eux; \
    install-php-extensions pdo pdo_mysql;

- create xdebug.ini

- add target to docker-compose
- add XDEBUG_MODE env var to docker compose
- add extra hosts to docker compose

# Pushing to registry

- docker build --target app -t garyclarke/php-composer:1.0 -f ./php/Dockerfile .
- docker images
- docker push garyclarke/php-composer:1.0
